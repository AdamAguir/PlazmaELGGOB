@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using PlazmaELGGOB.Model;
@using System;
@using System.Timers;

@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Net;


@implements IAsyncDisposable
@inject NavigationManager navManager

<style>
    .keyButton {
        width: 80px;
        height: 80px;
        border: none;
        border-radius: 40px;
        outline: none;
        background: #18053b;
        color: white;
        cursor: pointer;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
        text-align: center;
        padding-top: 30px;
    }

        .keyButton:hover {
            background: #091580;
        }

    .keyButton_clicked {
        width: 80px;
        height: 80px;
        border: none;
        border-radius: 40px;
        outline: none;
        background: #091580;
        color: white;
        cursor: pointer;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
        text-align: center;
        padding-top: 30px;
        -webkit-box-shadow: inset 0px 0px 5px #c1c1c1;
        -moz-box-shadow: inset 0px 0px 5px #c1c1c1;
        box-shadow: inset 0px 0px 5px #c1c1c1;
    }
</style>
<PageTitle>Game</PageTitle>

<h1 class="text-center">Plazma Elggob</h1>

<body>
    @if (GameComplete)

    {
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="row"><h3>Player: @history.User</h3></div>
                    <div class="row"><h3>Total Points: @history.TotalPoints</h3></div>
                    @foreach (string message in history.History)
                    {
                        <div class="row"><h3>@message</h3></div>
                    }
                </div>
                <div class="col">
                    <div class="row"><h3>Player: @opponetHistory.User</h3></div>
                    <div class="row"><h3>Total Points: @opponetHistory.TotalPoints</h3></div>
                    @foreach (string message in opponetHistory.History)
                    {
                        <div class="row"><h3>@message</h3></div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col text-center">
                    @if (history.TotalPoints == opponetHistory.TotalPoints)
                    {
                        <h2 class="text-primary">You Tie</h2>
                    }
                    else if (history.TotalPoints > opponetHistory.TotalPoints)
                    {
                        <h2 class="text-success">You Win!</h2>
                    }
                    else
                    {
                        <h2 class="text-danger">You Lose :(</h2>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="col-2 float-start">
                <div class="row">
                    Please enter username:<input id="username" @bind="history.User" class="form-control" />
                </div>
                <div class="row">
                    <h1>@ClickedLetters</h1>
                </div>
                <div class="row">
                    <h1>@history.TotalPoints</h1>
                </div>
            </div>
            <div class="col-6 mx-auto">
                <div class="row">
                    @if (aTimer != null)
                    {
                        <div class="row">
                            <div class="col border-5 border-dark">
                                @if (timeRemaning > 10)
                                {
                                    <h1 class="text-center text-success">@timeRemaning</h1>
                                }
                                else
                                {
                                    <h1 class="text-center text-danger">@timeRemaning</h1>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col">
                            <button type="button" class="btn btn-success w-100" @onclick="@(() => StartTimer())">Start</button>
                        </div>
                    }
                </div>
                @*here are the keypad buttons*@
                @if (history.User == "" && IsConnected)
                {
                    <div class="row">
                        <div class="col">
                            <h1>Please Enter a Username to start the Game.</h1>
                        </div>
                    </div>
                }
                else
                {
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="row">
                            @for (int j = 0; j < 4; j++)
                            {
                                int slot = (4 * i) + j;
                                @if (!KeyPad[slot].Clicked)
                                {
                                    <div class="keyButton m-1" @onclick="@(() => KeyPadClick(slot))">@KeyPad[slot].Letter</div>
                                }
                                else
                                {
                                    <div class="keyButton_clicked m-1" @onclick="@(() => KeyPadClick(slot))">@KeyPad[slot].Letter</div>
                                }
                            }
                        </div>
                    }
                }
            </div>


            <div class="col-3 float-end">
                @ErrorMessage
                @foreach (string message in messeges)
                {
                    <div class="row">
                        @message
                    </div>
                }
            </div>
        </div>
    }
</body>



@code {


    //<button type="button" class="usernameSubmitBtn btn-primary" @onclick="@(() => startTimer())">Submit</button>
    //<h2>Timer @timeRemaning</h2>

    //use all uppercase characters to make it easier to read.
    private static char[] chars = generateRandomArray();
    private List<BoggleKey> KeyPad = constructKeypad(chars);
    private string ClickedLetters = "";
    private int sender = -1;
    private HubConnection? hubConnection;
    private Timer aTimer;
    private int timeRemaning = 60;
    private int userCount = 0;
    private bool GameComplete = false;
    //private List<DisplayPointMessage> displayMessages = new List<DisplayPointMessage>();
    private List<string> messeges = new List<string>();


    private GameHistory history = new GameHistory("", 0, new List<string>());
    private GameHistory opponetHistory = new GameHistory("", 0, new List<string>());

    private List<string> GuessedWords = new List<string>();

    private string ErrorMessage;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }



    //boolean that is updated in the IfWord() function to tell if the inputed word is valid or not
    private bool isRealWord;




    /// <summary>
    /// Please pass in a random char array for the letters.
    /// This function is polite enough to do the rest and return
    /// A list of boggle keys. Each key is given a list of what
    /// Keys can follow it.
    /// </summary>
    /// <param name="chars"></param>
    /// <returns></returns>
    private static char[] generateRandomArray()
    {
        var rand = new Random();
        int randomNumber;
        char[] Consonants = new char[] { 'B', 'C', 'D',
                                                 'F', 'G', 'H',
                                                 'J', 'K', 'L',
                                                 'M', 'N', 'P',
                                                 'Q', 'R', 'S',
                                                 'T', 'V', 'W',
                                                 'X', 'Y', 'Z' };
        char[] possibleVowels = new char[] { 'A', 'E', 'I', 'O', 'U' };
        char[] randChars = new char[16];

        for (int i = 0; i < 16; i++)
        {
            randomNumber = rand.Next(0, 99);
            if (randomNumber < 40)
            {
                randomNumber = rand.Next(0, 4);
                randChars[i] = possibleVowels[randomNumber];
            }
            else
            {
                randomNumber = rand.Next(0, 20);
                randChars[i] = Consonants[randomNumber];
            }
        }

        return randChars;
    }


    private static List<BoggleKey> constructKeypad(char[] chars)
    {
        List<BoggleKey> keys = new List<BoggleKey>();

        keys.Add(new BoggleKey(0, chars[0], false, new int[] { 1, 4, 5 }));
        keys.Add(new BoggleKey(1, chars[1], false, new int[] { 0, 2, 4, 5, 6 }));
        keys.Add(new BoggleKey(2, chars[2], false, new int[] { 1, 3, 5, 6, 7 }));
        keys.Add(new BoggleKey(3, chars[3], false, new int[] { 2, 6, 7 }));
        keys.Add(new BoggleKey(4, chars[4], false, new int[] { 0, 1, 5, 8, 9 }));
        keys.Add(new BoggleKey(5, chars[5], false, new int[] { 0, 1, 2, 4, 6, 8, 9, 10 }));
        keys.Add(new BoggleKey(6, chars[6], false, new int[] { 1, 2, 3, 5, 7, 9, 10, 11 }));
        keys.Add(new BoggleKey(7, chars[7], false, new int[] { 2, 3, 6, 10, 11 }));
        keys.Add(new BoggleKey(8, chars[8], false, new int[] { 4, 5, 9, 12, 13 }));
        keys.Add(new BoggleKey(9, chars[9], false, new int[] { 4, 5, 6, 8, 10, 12, 13, 14 }));
        keys.Add(new BoggleKey(10, chars[10], false, new int[] { 5, 6, 7, 9, 11, 13, 14, 15 }));
        keys.Add(new BoggleKey(11, chars[11], false, new int[] { 6, 7, 10, 14, 15 }));
        keys.Add(new BoggleKey(12, chars[12], false, new int[] { 8, 9, 13 }));
        keys.Add(new BoggleKey(13, chars[13], false, new int[] { 8, 9, 10, 12, 14 }));
        keys.Add(new BoggleKey(14, chars[14], false, new int[] { 9, 10, 11, 13, 15 }));
        keys.Add(new BoggleKey(15, chars[15], false, new int[] { 10, 11, 14 }));

        return keys;
    }


    public async void KeyPadClick(int key)
    {
        if (sender == -1 || CheckMoveList(key))
        {
            if (!KeyPad[key].Clicked)
            {
                sender = key;
                KeyPad[key].Clicked = true;
                ClickedLetters += KeyPad[key].Letter;
            }
            else
            {
                ResetKeyPad();
            }
        }
        else
        {
            if (key == sender)
            {
                if (GuessedWords.Contains(ClickedLetters) || ClickedLetters.Length < 3)
                {
                    //error, you have already guessed that word
                    ErrorMessage = "You have already guessed that word or it is too short";
                }
                else
                {
                    await CheckWord();
                    if (isRealWord)
                    {
                        ErrorMessage = "";
                        int points = CalcPoints();
                        //DisplayPointMessage newMessage = new DisplayPointMessage(points, history.User + " scored " + points, 3);
                        //displayMessages.Add();
                        history.History.Add("Word: " + ClickedLetters + " Points: " + points);
                        history.TotalPoints += points;
                        //ResetKeyPad();
                        await Send(history.User, points.ToString());
                    }
                    else
                    {
                        ErrorMessage = "That is not a real word";
                    }
                }
            }
            ResetKeyPad();
            InvokeAsync(StateHasChanged);
        }

    }


    public bool CheckMoveList(int key)
    {
        foreach (int move in KeyPad[key].allowedIndexes)
        {
            if (move == sender)
            {
                return true;
            }
        }
        return false;
    }







    /// <summary>
    /// function that sets the isRealWord variable to true or false depending on if the inputed word is found in the api or not.
    /// </summary>
    async Task<HttpResponseMessage> CheckWord()
    {
        try
        {
            using (HttpClient client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync("https://api.dictionaryapi.dev/api/v2/entries/en/" + ClickedLetters);

                if (response.IsSuccessStatusCode)
                {
                    isRealWord = true;
                    GuessedWords.Add(ClickedLetters);
                }
                else
                {
                    isRealWord = false;
                }

                return response;
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }



    public int CalcPoints()
    {
        //TODO: use ClickedLetters for calculation, modify total points, show how many points were scored.

        if (ClickedLetters.Length == 3)
        {
            return 1;
        }
        else if (ClickedLetters.Length == 4)
        {
            return 2;
        }
        else if (ClickedLetters.Length == 5)
        {
            return 4;
        }
        else if (ClickedLetters.Length == 6)
        {
            return 6;
        }
        else if (ClickedLetters.Length == 7)
        {
            return 8;
        }
        else if (ClickedLetters.Length == 8)
        {
            return 10;
        }
        else if (ClickedLetters.Length > 8)
        {
            return 15;
        }
        else
        {
            return 0;
        }

    }
    public void ResetKeyPad()
    {
        foreach (BoggleKey key in KeyPad)
        {
            key.Clicked = false;
        }
        ClickedLetters = "";
        sender = -1;
    }

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
        .WithUrl(navManager.ToAbsoluteUri("/pointhub"))
        .WithAutomaticReconnect()
        .Build();

        // this is where we capture data coming back.
        hubConnection.On<string, string>("RecieveMessage", (user, points) =>
        {
            var formattedMessage = $"{user} scored {points} points!";
            messeges.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        // this is the timer hub
        hubConnection.On<int>("UpdateTimer", (timeRemaning) =>
        {

        });

        hubConnection.On<GameHistory>("RecieveHistory", (sendHistory) =>
        {
            opponetHistory = sendHistory;
            InvokeAsync(StateHasChanged);
        });

        // start timer

        hubConnection.On("StartTimer", () =>
        {
            if (aTimer == null)
            {
                StartTimer();
            }
        });


        await hubConnection.StartAsync();
    }

    private async Task Send(string user, string points)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", user, points);
        }
    }

    private async Task TimerCheck()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TimerCheck");
        }
    }

    private async Task SendHistory()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendGameHistory", history);
        }
    }

    public async void StartTimer()
    {

        if (history.User != "")
        {
            await TimerCheck();

            timeRemaning = 60;
            //create timer at 1 second interval
            if (aTimer == null)

            {
                aTimer = new System.Timers.Timer(1000);
            }
            else
            {
                aTimer.Stop();
                aTimer = new System.Timers.Timer(1000);
            }
            aTimer.Elapsed += OnTimedEvent;
            aTimer.AutoReset = true;
            aTimer.Enabled = true;
        }
    }

    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {

        if (timeRemaning > 0)
        {
            timeRemaning -= 1;
        }
        else
        {
            await SendHistory();
            GameComplete = true;
            aTimer.Enabled = false;
            aTimer.Stop();
        }
        await InvokeAsync(StateHasChanged);

    }
}

